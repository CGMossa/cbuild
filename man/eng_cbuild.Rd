% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knitr.R
\name{eng_cbuild}
\alias{eng_cbuild}
\title{A \code{cbuild} engine for \code{knitr}}
\usage{
eng_cbuild(options)
}
\arguments{
\item{options}{Knitr options.}
}
\description{
This provides a \code{cbuild} engine for \code{knitr}, which is used for rendering
C chunks. It is automatically registered when cbuild is loaded with
\code{library(cbuild)}, so there is no need to set it manually.

To use it, create a standard R Markdown chunk, and put \code{cbuild} as the
engine name, like this:\preformatted{```{cbuild}
// [[ export ]]
SEXP fn(SEXP x) {
  return x;
}
```
}

The engine is powered by \code{\link[=source_code]{source_code()}}.

By default, the engine will assign any functions that have been marked
with \code{// [[ export ]]} into the global environment, but this can be
controlled with the knitr option, \code{cbuild.env}, see below.
}
\details{
\code{eng_cbuild()} is an alternative to the default C chunk renderer, which
loads the dynamic library but does not bind the C pointers to any R
functions.
}
\section{Knitr Options}{


There are a number of knitr options that can be set for the cbuild engine.
\itemize{
\item \code{cbuild.includes}: Passed on to the \code{includes} option of \code{source_code()}.
\item \code{cbuild.no_remap}: Passed on to the \code{no_remap} option of \code{source_code()}.
\item \code{cbuild.env}: A single character string specifying the name of a
pre-existing environment object to create the functions in. If \code{cbuild.env}
is left unset, the default is to assign in the global environment.
}

This is an example of how you could customize all 3 options:

First create an R chunk with an alternative environment:\preformatted{```{r}
env <- new.env()
```
}

Now create our C chunk:\preformatted{```{cbuild, cbuild.includes = "Rdefines.h", cbuild.env = env, cbuild.no_remap = FALSE}
// [[ export ]]
SEXP fn(SEXP x) {
  // `NUMERIC_POINTER()` is only available in `Rdefines.h`
  double* p_x = NUMERIC_POINTER(x);

  // Would be `Rf_ScalarReal()` if no remap was done
  return ScalarReal(p_x[0]);
}
```
}

After running the C chunk, we can do:\preformatted{```{r}
env$fn(2)
# [1] 2
```
}
}

